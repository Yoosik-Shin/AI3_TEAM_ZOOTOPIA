{
    "sourceFile": "ZOOTOPIA/src/main/java/com/aloha/zootopia/controller/HospitalController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1751814130923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751814159826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+package com.aloha.zootopia.controller;\n+\n+import java.security.Principal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import com.aloha.zootopia.domain.Hospital;\n+import com.aloha.zootopia.dto.HospReviewForm;\n+import com.aloha.zootopia.dto.HospitalForm;\n+import com.aloha.zootopia.dto.PageInfo;\n+import com.aloha.zootopia.mapper.UserMapper;\n+import com.aloha.zootopia.service.AnimalService;\n+import com.aloha.zootopia.service.HospitalService;\n+// import com.github.pagehelper.PageInfo;\n+import com.aloha.zootopia.service.hospital.HospitalImageUploader;\n+\n+@Controller\n+public class HospitalController {\n+    @Autowired HospitalService hospitalService;\n+    @Autowired AnimalService animalService;\n+    @Autowired UserMapper userMapper;\n+    @Autowired HospitalImageUploader hospitalImageUploader;\n+\n+    public HospitalController(HospitalService hospitalService, AnimalService animalService, com.aloha.zootopia.mapper.UserMapper userMapper) {\n+        this.hospitalService = hospitalService;\n+        this.animalService = animalService;\n+    }\n+\n+    // @GetMapping(\"/hospitals\")\n+    // public String list(@RequestParam(required = false) List<Integer> animal, Model model) {\n+    //     model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n+    //     model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal);\n+    //     model.addAttribute(\"hospitals\", hospitalService.getHospitals(animal));\n+    //     return \"service/hospital/hosp_list\";\n+    // }\n+\n+    @GetMapping(\"/hospitals\")\n+    public String list(\n+        @RequestParam(required = false) List<Integer> animal,\n+        @RequestParam(value = \"pageNum\", defaultValue = \"1\") int pageNum,\n+        Model model) {\n+\n+        int pageSize = 6;\n+        int total = hospitalService.getHospitalCount(animal);\n+        List<Hospital> hospitalList = hospitalService.getHospitalList(animal, pageNum, pageSize);\n+\n+        PageInfo pageInfo = new PageInfo();\n+        pageInfo.setPageNum(pageNum);\n+        pageInfo.setPageSize(pageSize);\n+        pageInfo.setTotal(total);\n+        int pages = (int) Math.ceil((double) total / pageSize);\n+        pageInfo.setPages(pages);\n+\n+        // 네비게이션 계산 (5개씩)\n+        int navSize = 5;\n+        int startPage = ((pageNum - 1) / navSize) * navSize + 1;\n+        int endPage = Math.min(startPage + navSize - 1, pages);\n+        pageInfo.setStartPage(startPage);\n+        pageInfo.setEndPage(endPage);\n+        pageInfo.setHasPreviousPage(pageNum > 1);\n+        pageInfo.setHasNextPage(pageNum < pages);\n+        pageInfo.setHasFirstPage(pages > 1);\n+        pageInfo.setHasLastPage(endPage < pages);\n+\n+        model.addAttribute(\"hospitalList\", hospitalList);\n+        model.addAttribute(\"pageInfo\", pageInfo);\n+        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n+        String selectedAnimalsString = \"\";\n+        if (animal != null && !animal.isEmpty()) {\n+            selectedAnimalsString = animal.stream()\n+                                        .map(String::valueOf)\n+                                        .collect(Collectors.joining(\",\"));\n+        }\n+        model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal); // 기존 리스트도 유지\n+        model.addAttribute(\"selectedAnimalsString\", selectedAnimalsString); // 새로 추가\n+\n+        return \"service/hospital/hosp_list\";\n+    }\n+\n+\n+    @GetMapping(\"/hospitals/detail/{id}\")\n+    public String details(@PathVariable Integer id, Model model) {\n+        model.addAttribute(\"hospital\", hospitalService.getHospital(id));\n+        model.addAttribute(\"reviews\", hospitalService.getReviews(id));\n+        model.addAttribute(\"reviewForm\", new HospReviewForm());\n+        return \"service/hospital/details\";\n+    }\n+\n+    // @PreAuthorize(\"hasRole('ADMIN')\")\n+    @GetMapping(\"/hospitals/new\")\n+    public String createForm(Model model) {\n+        model.addAttribute(\"hospitalForm\", new HospitalForm());\n+        model.addAttribute(\"specialtyList\", hospitalService.getAllSpecialties());\n+        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n+        return \"service/hospital/create_hospital\";\n+    }\n+\n+    // @PreAuthorize(\"hasRole('ADMIN')\")\n+    @PostMapping(\"/hospitals\")\n+    public String create(@ModelAttribute HospitalForm form, @RequestParam(value = \"thumbnailImageFile\", required = false) MultipartFile thumbnailImageFile) throws Exception {\n+        if (thumbnailImageFile != null && !thumbnailImageFile.isEmpty()) {\n+            String imageUrl = hospitalImageUploader.uploadFile(thumbnailImageFile);\n+            form.setThumbnailImageUrl(imageUrl);\n+        }\n+        hospitalService.createHospital(form);\n+        return \"redirect:/hospitals\";\n+    }\n+\n+    @PostMapping(\"/hospitals/{id}/reviews\")\n+    public String addReview(@PathVariable Integer id, @ModelAttribute HospReviewForm form, Principal principal) {\n+        if (principal == null) {\n+            // 로그인하지 않은 사용자 처리 (예: 로그인 페이지로 리다이렉트)\n+            return \"redirect:/login\"; // 또는 다른 로그인 페이지 경로\n+        }\n+        String username = principal.getName(); // 이메일 (username)\n+        com.aloha.zootopia.domain.Users user = null;\n+        try {\n+            user = userMapper.select(username);\n+        } catch (Exception e) {\n+            // 사용자 조회 실패 처리\n+            e.printStackTrace();\n+            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n+        }\n+        if (user == null) {\n+            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n+        }\n+        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n+        String nickname = user.getNickname(); // Users 엔티티에 nickname 필드가 있다고 가정\n+\n+        hospitalService.addReview(id, form, nickname, userId);\n+        return \"redirect:/hospitals/detail/\" + id;\n+    }\n+\n+    @PostMapping(\"/hospitals/{id}/reviews/{reviewId}/edit\")\n+    public String updateReview(@PathVariable Integer id,\n+                               @PathVariable Integer reviewId,\n+                               @RequestParam String content,\n+                               Principal principal) {\n+        if (principal == null) {\n+            return \"redirect:/login\";\n+        }\n+        String username = principal.getName(); // 이메일 (username)\n+        com.aloha.zootopia.domain.Users user = null;\n+        try {\n+            user = userMapper.select(username);\n+        } catch (Exception e) {\n+            // 사용자 조회 실패 처리\n+            e.printStackTrace();\n+            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n+        }\n+        if (user == null) {\n+            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n+        }\n+        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n+\n+        hospitalService.updateReview(reviewId, content, userId);\n+        return \"redirect:/hospitals/detail/\" + id;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751900212196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,339 +1,227 @@\n-package com.aloha.zootopia.controller;\n-\n-import java.security.Principal;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import com.aloha.zootopia.domain.Hospital;\n-import com.aloha.zootopia.dto.HospReviewForm;\n-import com.aloha.zootopia.dto.HospitalForm;\n-import com.aloha.zootopia.dto.PageInfo;\n-import com.aloha.zootopia.mapper.UserMapper;\n-import com.aloha.zootopia.service.AnimalService;\n-import com.aloha.zootopia.service.HospitalService;\n-// import com.github.pagehelper.PageInfo;\n-import com.aloha.zootopia.service.hospital.HospitalImageUploader;\n-\n-@Controller\n-public class HospitalController {\n-    @Autowired HospitalService hospitalService;\n-    @Autowired AnimalService animalService;\n-    @Autowired UserMapper userMapper;\n-    @Autowired HospitalImageUploader hospitalImageUploader;\n-\n-    public HospitalController(HospitalService hospitalService, AnimalService animalService, com.aloha.zootopia.mapper.UserMapper userMapper) {\n-        this.hospitalService = hospitalService;\n-        this.animalService = animalService;\n-    }\n-\n-    // @GetMapping(\"/hospitals\")\n-    // public String list(@RequestParam(required = false) List<Integer> animal, Model model) {\n-    //     model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n-    //     model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal);\n-    //     model.addAttribute(\"hospitals\", hospitalService.getHospitals(animal));\n-    //     return \"service/hospital/hosp_list\";\n-    // }\n-\n-    @GetMapping(\"/hospitals\")\n-    public String list(\n-        @RequestParam(required = false) List<Integer> animal,\n-        @RequestParam(value = \"pageNum\", defaultValue = \"1\") int pageNum,\n-        Model model) {\n-\n-        int pageSize = 6;\n-        int total = hospitalService.getHospitalCount(animal);\n-        List<Hospital> hospitalList = hospitalService.getHospitalList(animal, pageNum, pageSize);\n-\n-        PageInfo pageInfo = new PageInfo();\n-        pageInfo.setPageNum(pageNum);\n-        pageInfo.setPageSize(pageSize);\n-        pageInfo.setTotal(total);\n-        int pages = (int) Math.ceil((double) total / pageSize);\n-        pageInfo.setPages(pages);\n-\n-        // 네비게이션 계산 (5개씩)\n-        int navSize = 5;\n-        int startPage = ((pageNum - 1) / navSize) * navSize + 1;\n-        int endPage = Math.min(startPage + navSize - 1, pages);\n-        pageInfo.setStartPage(startPage);\n-        pageInfo.setEndPage(endPage);\n-        pageInfo.setHasPreviousPage(pageNum > 1);\n-        pageInfo.setHasNextPage(pageNum < pages);\n-        pageInfo.setHasFirstPage(pages > 1);\n-        pageInfo.setHasLastPage(endPage < pages);\n-\n-        model.addAttribute(\"hospitalList\", hospitalList);\n-        model.addAttribute(\"pageInfo\", pageInfo);\n-        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n-        String selectedAnimalsString = \"\";\n-        if (animal != null && !animal.isEmpty()) {\n-            selectedAnimalsString = animal.stream()\n-                                        .map(String::valueOf)\n-                                        .collect(Collectors.joining(\",\"));\n-        }\n-        model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal); // 기존 리스트도 유지\n-        model.addAttribute(\"selectedAnimalsString\", selectedAnimalsString); // 새로 추가\n-\n-        return \"service/hospital/hosp_list\";\n-    }\n-\n-\n-    @GetMapping(\"/hospitals/detail/{id}\")\n-    public String details(@PathVariable Integer id, Model model) {\n-        model.addAttribute(\"hospital\", hospitalService.getHospital(id));\n-        model.addAttribute(\"reviews\", hospitalService.getReviews(id));\n-        model.addAttribute(\"reviewForm\", new HospReviewForm());\n-        return \"service/hospital/details\";\n-    }\n-\n-    // @PreAuthorize(\"hasRole('ADMIN')\")\n-    @GetMapping(\"/hospitals/new\")\n-    public String createForm(Model model) {\n-        model.addAttribute(\"hospitalForm\", new HospitalForm());\n-        model.addAttribute(\"specialtyList\", hospitalService.getAllSpecialties());\n-        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n-        return \"service/hospital/create_hospital\";\n-    }\n-\n-    // @PreAuthorize(\"hasRole('ADMIN')\")\n-    @PostMapping(\"/hospitals\")\n-    public String create(@ModelAttribute HospitalForm form, @RequestParam(value = \"thumbnailImageFile\", required = false) MultipartFile thumbnailImageFile) throws Exception {\n-        if (thumbnailImageFile != null && !thumbnailImageFile.isEmpty()) {\n-            String imageUrl = hospitalImageUploader.uploadFile(thumbnailImageFile);\n-            form.setThumbnailImageUrl(imageUrl);\n-        }\n-        hospitalService.createHospital(form);\n-        return \"redirect:/hospitals\";\n-    }\n-\n-    @PostMapping(\"/hospitals/{id}/reviews\")\n-    public String addReview(@PathVariable Integer id, @ModelAttribute HospReviewForm form, Principal principal) {\n-        if (principal == null) {\n-            // 로그인하지 않은 사용자 처리 (예: 로그인 페이지로 리다이렉트)\n-            return \"redirect:/login\"; // 또는 다른 로그인 페이지 경로\n-        }\n-        String username = principal.getName(); // 이메일 (username)\n-        com.aloha.zootopia.domain.Users user = null;\n-        try {\n-            user = userMapper.select(username);\n-        } catch (Exception e) {\n-            // 사용자 조회 실패 처리\n-            e.printStackTrace();\n-            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n-        }\n-        if (user == null) {\n-            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n-        }\n-        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n-        String nickname = user.getNickname(); // Users 엔티티에 nickname 필드가 있다고 가정\n-\n-        hospitalService.addReview(id, form, nickname, userId);\n-        return \"redirect:/hospitals/detail/\" + id;\n-    }\n-\n-    @PostMapping(\"/hospitals/{id}/reviews/{reviewId}/edit\")\n-    public String updateReview(@PathVariable Integer id,\n-                               @PathVariable Integer reviewId,\n-                               @RequestParam String content,\n-                               Principal principal) {\n-        if (principal == null) {\n-            return \"redirect:/login\";\n-        }\n-        String username = principal.getName(); // 이메일 (username)\n-        com.aloha.zootopia.domain.Users user = null;\n-        try {\n-            user = userMapper.select(username);\n-        } catch (Exception e) {\n-            // 사용자 조회 실패 처리\n-            e.printStackTrace();\n-            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n-        }\n-        if (user == null) {\n-            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n-        }\n-        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n-\n-        hospitalService.updateReview(reviewId, content, userId);\n-        return \"redirect:/hospitals/detail/\" + id;\n-    }\n-}\n-package com.aloha.zootopia.controller;\n-\n-import java.security.Principal;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-\n-import com.aloha.zootopia.domain.Hospital;\n-import com.aloha.zootopia.dto.HospReviewForm;\n-import com.aloha.zootopia.dto.HospitalForm;\n-import com.aloha.zootopia.dto.PageInfo;\n-import com.aloha.zootopia.mapper.UserMapper;\n-import com.aloha.zootopia.service.AnimalService;\n-import com.aloha.zootopia.service.HospitalService;\n-// import com.github.pagehelper.PageInfo;\n-import com.aloha.zootopia.service.hospital.HospitalImageUploader;\n-\n-@Controller\n-public class HospitalController {\n-    @Autowired HospitalService hospitalService;\n-    @Autowired AnimalService animalService;\n-    @Autowired UserMapper userMapper;\n-    @Autowired HospitalImageUploader hospitalImageUploader;\n-\n-    public HospitalController(HospitalService hospitalService, AnimalService animalService, com.aloha.zootopia.mapper.UserMapper userMapper) {\n-        this.hospitalService = hospitalService;\n-        this.animalService = animalService;\n-    }\n-\n-    // @GetMapping(\"/hospitals\")\n-    // public String list(@RequestParam(required = false) List<Integer> animal, Model model) {\n-    //     model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n-    //     model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal);\n-    //     model.addAttribute(\"hospitals\", hospitalService.getHospitals(animal));\n-    //     return \"service/hospital/hosp_list\";\n-    // }\n-\n-    @GetMapping(\"/hospitals\")\n-    public String list(\n-        @RequestParam(required = false) List<Integer> animal,\n-        @RequestParam(value = \"pageNum\", defaultValue = \"1\") int pageNum,\n-        Model model) {\n-\n-        int pageSize = 6;\n-        int total = hospitalService.getHospitalCount(animal);\n-        List<Hospital> hospitalList = hospitalService.getHospitalList(animal, pageNum, pageSize);\n-\n-        PageInfo pageInfo = new PageInfo();\n-        pageInfo.setPageNum(pageNum);\n-        pageInfo.setPageSize(pageSize);\n-        pageInfo.setTotal(total);\n-        int pages = (int) Math.ceil((double) total / pageSize);\n-        pageInfo.setPages(pages);\n-\n-        // 네비게이션 계산 (5개씩)\n-        int navSize = 5;\n-        int startPage = ((pageNum - 1) / navSize) * navSize + 1;\n-        int endPage = Math.min(startPage + navSize - 1, pages);\n-        pageInfo.setStartPage(startPage);\n-        pageInfo.setEndPage(endPage);\n-        pageInfo.setHasPreviousPage(pageNum > 1);\n-        pageInfo.setHasNextPage(pageNum < pages);\n-        pageInfo.setHasFirstPage(pages > 1);\n-        pageInfo.setHasLastPage(endPage < pages);\n-\n-        model.addAttribute(\"hospitalList\", hospitalList);\n-        model.addAttribute(\"pageInfo\", pageInfo);\n-        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n-        String selectedAnimalsString = \"\";\n-        if (animal != null && !animal.isEmpty()) {\n-            selectedAnimalsString = animal.stream()\n-                                        .map(String::valueOf)\n-                                        .collect(Collectors.joining(\",\"));\n-        }\n-        model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal); // 기존 리스트도 유지\n-        model.addAttribute(\"selectedAnimalsString\", selectedAnimalsString); // 새로 추가\n-\n-        return \"service/hospital/hosp_list\";\n-    }\n-\n-\n-    @GetMapping(\"/hospitals/detail/{id}\")\n-    public String details(@PathVariable Integer id, Model model) {\n-        model.addAttribute(\"hospital\", hospitalService.getHospital(id));\n-        model.addAttribute(\"reviews\", hospitalService.getReviews(id));\n-        model.addAttribute(\"reviewForm\", new HospReviewForm());\n-        return \"service/hospital/details\";\n-    }\n-\n-    // @PreAuthorize(\"hasRole('ADMIN')\")\n-    @GetMapping(\"/hospitals/new\")\n-    public String createForm(Model model) {\n-        model.addAttribute(\"hospitalForm\", new HospitalForm());\n-        model.addAttribute(\"specialtyList\", hospitalService.getAllSpecialties());\n-        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n-        return \"service/hospital/create_hospital\";\n-    }\n-\n-    // @PreAuthorize(\"hasRole('ADMIN')\")\n-    @PostMapping(\"/hospitals\")\n-    public String create(@ModelAttribute HospitalForm form, @RequestParam(value = \"thumbnailImageFile\", required = false) MultipartFile thumbnailImageFile) throws Exception {\n-        if (thumbnailImageFile != null && !thumbnailImageFile.isEmpty()) {\n-            String imageUrl = hospitalImageUploader.uploadFile(thumbnailImageFile);\n-            form.setThumbnailImageUrl(imageUrl);\n-        }\n-        hospitalService.createHospital(form);\n-        return \"redirect:/hospitals\";\n-    }\n-\n-    @PostMapping(\"/hospitals/{id}/reviews\")\n-    public String addReview(@PathVariable Integer id, @ModelAttribute HospReviewForm form, Principal principal) {\n-        if (principal == null) {\n-            // 로그인하지 않은 사용자 처리 (예: 로그인 페이지로 리다이렉트)\n-            return \"redirect:/login\"; // 또는 다른 로그인 페이지 경로\n-        }\n-        String username = principal.getName(); // 이메일 (username)\n-        com.aloha.zootopia.domain.Users user = null;\n-        try {\n-            user = userMapper.select(username);\n-        } catch (Exception e) {\n-            // 사용자 조회 실패 처리\n-            e.printStackTrace();\n-            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n-        }\n-        if (user == null) {\n-            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n-        }\n-        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n-        String nickname = user.getNickname(); // Users 엔티티에 nickname 필드가 있다고 가정\n-\n-        hospitalService.addReview(id, form, nickname, userId);\n-        return \"redirect:/hospitals/detail/\" + id;\n-    }\n-\n-    @PostMapping(\"/hospitals/{id}/reviews/{reviewId}/edit\")\n-    public String updateReview(@PathVariable Integer id,\n-                               @PathVariable Integer reviewId,\n-                               @RequestParam String content,\n-                               Principal principal) {\n-        if (principal == null) {\n-            return \"redirect:/login\";\n-        }\n-        String username = principal.getName(); // 이메일 (username)\n-        com.aloha.zootopia.domain.Users user = null;\n-        try {\n-            user = userMapper.select(username);\n-        } catch (Exception e) {\n-            // 사용자 조회 실패 처리\n-            e.printStackTrace();\n-            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n-        }\n-        if (user == null) {\n-            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n-        }\n-        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n-\n-        hospitalService.updateReview(reviewId, content, userId);\n-        return \"redirect:/hospitals/detail/\" + id;\n-    }\n+package com.aloha.zootopia.controller;\r\n+\r\n+import java.security.Principal;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.security.access.prepost.PreAuthorize;\r\n+import org.springframework.stereotype.Controller;\r\n+import org.springframework.ui.Model;\r\n+import org.springframework.web.bind.annotation.GetMapping;\r\n+import org.springframework.web.bind.annotation.ModelAttribute;\r\n+import org.springframework.web.bind.annotation.PathVariable;\r\n+import org.springframework.web.bind.annotation.PostMapping;\r\n+import org.springframework.web.bind.annotation.RequestParam;\r\n+import org.springframework.web.multipart.MultipartFile;\r\n+\r\n+import com.aloha.zootopia.domain.Hospital;\r\n+import com.aloha.zootopia.dto.HospReviewForm;\r\n+import com.aloha.zootopia.dto.HospitalForm;\r\n+import com.aloha.zootopia.dto.PageInfo;\r\n+import com.aloha.zootopia.mapper.UserMapper;\r\n+import com.aloha.zootopia.service.AnimalService;\r\n+import com.aloha.zootopia.service.HospitalService;\r\n+// import com.github.pagehelper.PageInfo;\r\n+import com.aloha.zootopia.service.hospital.HospitalImageUploader;\r\n+\r\n+@Controller\r\n+public class HospitalController {\r\n+    @Autowired HospitalService hospitalService;\r\n+    @Autowired AnimalService animalService;\r\n+    @Autowired UserMapper userMapper;\r\n+    @Autowired HospitalImageUploader hospitalImageUploader;\r\n+\r\n+    public HospitalController(HospitalService hospitalService, AnimalService animalService, com.aloha.zootopia.mapper.UserMapper userMapper) {\r\n+        this.hospitalService = hospitalService;\r\n+        this.animalService = animalService;\r\n+    }\r\n+    // @GetMapping(\"/hospitals\")\r\n+    // public String list(@RequestParam(required = false) List<Integer> animal, Model model) {\r\n+    //     model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\r\n+    //     model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal);\r\n+    //     model.addAttribute(\"hospitals\", hospitalService.getHospitals(animal));\r\n+    //     return \"service/hospital/hosp_list\";\r\n+    // }\r\n+\r\n+    @GetMapping(\"/hospitals\")\r\n+    public String list(\r\n+        @RequestParam(required = false) List<Integer> animal,\r\n+        @RequestParam(value = \"pageNum\", defaultValue = \"1\") int pageNum,\r\n+        Model model) {\r\n+\r\n+        int pageSize = 6;\r\n+        int total = hospitalService.getHospitalCount(animal);\r\n+        List<Hospital> hospitalList = hospitalService.getHospitalList(animal, pageNum, pageSize);\r\n+\r\n+        PageInfo pageInfo = new PageInfo();\r\n+        pageInfo.setPageNum(pageNum);\r\n+        pageInfo.setPageSize(pageSize);\r\n+        pageInfo.setTotal(total);\r\n+        int pages = (int) Math.ceil((double) total / pageSize);\r\n+        pageInfo.setPages(pages);\r\n+\r\n+        // 네비게이션 계산 (5개씩)\r\n+        int navSize = 5;\r\n+        int startPage = ((pageNum - 1) / navSize) * navSize + 1;\r\n+        int endPage = Math.min(startPage + navSize - 1, pages);\r\n+        pageInfo.setStartPage(startPage);\r\n+        pageInfo.setEndPage(endPage);\r\n+        pageInfo.setHasPreviousPage(pageNum > 1);\r\n+        pageInfo.setHasNextPage(pageNum < pages);\r\n+        pageInfo.setHasFirstPage(pages > 1);\r\n+        pageInfo.setHasLastPage(endPage < pages);\r\n+\r\n+        model.addAttribute(\"hospitalList\", hospitalList);\r\n+        model.addAttribute(\"pageInfo\", pageInfo);\r\n+        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\r\n+        String selectedAnimalsString = \"\";\r\n+        if (animal != null && !animal.isEmpty()) {\r\n+            selectedAnimalsString = animal.stream()\r\n+                                        .map(String::valueOf)\r\n+                                        .collect(Collectors.joining(\",\"));\r\n+        }\r\n+        model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal); // 기존 리스트도 유지\r\n+        model.addAttribute(\"selectedAnimalsString\", selectedAnimalsString); // 새로 추가\r\n+\r\n+        return \"service/hospital/hosp_list\";\r\n+    }\r\n+\r\n+\r\n+    @GetMapping(\"/hospitals/detail/{id}\")\r\n+    public String details(@PathVariable Integer id, Model model) {\r\n+        model.addAttribute(\"hospital\", hospitalService.getHospital(id));\r\n+        model.addAttribute(\"reviews\", hospitalService.getReviews(id));\r\n+        model.addAttribute(\"reviewForm\", new HospReviewForm());\r\n+        return \"service/hospital/details\";\r\n+    }\r\n+\r\n+    @PreAuthorize(\"hasRole('ADMIN')\")\r\n+    @GetMapping(\"/hospitals/new\")\r\n+    public String createForm(Model model) {\r\n+\r\n+        // 인증 객체에서 권한 정보 로그 출력\r\n+        org.springframework.security.core.Authentication auth = \r\n+            org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();\r\n+        System.out.println(\"현재 로그인 사용자: \" + auth.getName());\r\n+        System.out.println(\"권한 목록: \" + auth.getAuthorities());\r\n+        \r\n+        model.addAttribute(\"hospitalForm\", new HospitalForm());\r\n+        model.addAttribute(\"specialtyList\", hospitalService.getAllSpecialties());\r\n+        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\r\n+        return \"service/hospital/create_hospital\";\r\n+    }\r\n+\r\n+    @PreAuthorize(\"hasRole('ADMIN')\")\r\n+    @PostMapping(\"/hospitals/new\")\r\n+    public String create(@ModelAttribute HospitalForm form, @RequestParam(value = \"thumbnailImageFile\", required = false) MultipartFile thumbnailImageFile) throws Exception {\r\n+        if (thumbnailImageFile != null && !thumbnailImageFile.isEmpty()) {\r\n+            String imageUrl = hospitalImageUploader.uploadFile(thumbnailImageFile);\r\n+            form.setThumbnailImageUrl(imageUrl);\r\n+        }\r\n+        hospitalService.createHospital(form);\r\n+        return \"redirect:/hospitals\";\r\n+    }\r\n+\r\n+    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n+    @GetMapping(\"/hospitals/edit/{id}\")\r\n+    public String editForm(@PathVariable Integer id, Model model) {\r\n+        Hospital hospital = hospitalService.getHospital(id);\r\n+        HospitalForm hospitalForm = new HospitalForm();\r\n+        // Hospital 객체의 데이터를 HospitalForm으로 복사\r\n+        hospitalForm.setHospitalId(hospital.getHospitalId());\r\n+        hospitalForm.setName(hospital.getName());\r\n+        hospitalForm.setAddress(hospital.getAddress());\r\n+        hospitalForm.setHomepage(hospital.getHomepage());\r\n+        hospitalForm.setPhone(hospital.getPhone());\r\n+        hospitalForm.setEmail(hospital.getEmail());\r\n+        hospitalForm.setThumbnailImageUrl(hospital.getThumbnailImageUrl());\r\n+        \r\n+        // 진료 과목 및 진료 가능 동물 ID 리스트 설정\r\n+        if (hospital.getSpecialties() != null) {\r\n+            hospitalForm.setSpecialtyIds(hospital.getSpecialties().stream()\r\n+                                                .map(s -> s.getSpecialtyId())\r\n+                                                .collect(Collectors.toList()));\r\n+        }\r\n+        if (hospital.getAnimals() != null) {\r\n+            hospitalForm.setAnimalIds(hospital.getAnimals().stream()\r\n+                                            .map(a -> a.getAnimalId())\r\n+                                            .collect(Collectors.toList()));\r\n+        }\r\n+\r\n+        model.addAttribute(\"hospitalForm\", hospitalForm);\r\n+        model.addAttribute(\"specialtyList\", hospitalService.getAllSpecialties());\r\n+        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\r\n+        return \"service/hospital/create_hospital\"; // create_hospital.html 재사용\r\n+    }\r\n+\r\n+    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n+    @PostMapping(\"/hospitals/edit\")\r\n+    public String update(@ModelAttribute HospitalForm form, @RequestParam(value = \"thumbnailImageFile\", required = false) MultipartFile thumbnailImageFile) throws Exception {\r\n+        if (thumbnailImageFile != null && !thumbnailImageFile.isEmpty()) {\r\n+            String imageUrl = hospitalImageUploader.uploadFile(thumbnailImageFile);\r\n+            form.setThumbnailImageUrl(imageUrl);\r\n+        }\r\n+        hospitalService.updateHospital(form); // HospitalService에 updateHospital 메서드 필요\r\n+        return \"redirect:/hospitals/detail/\" + form.getHospitalId();\r\n+    }\r\n+\r\n+    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\r\n+    @PostMapping(\"/hospitals/delete/{id}\")\r\n+    public String delete(@PathVariable Integer id) {\r\n+        hospitalService.deleteHospital(id); // HospitalService에 deleteHospital 메서드 필요\r\n+        return \"redirect:/hospitals\";\r\n+    }\r\n+\r\n+    @PostMapping(\"/hospitals/{id}/reviews\")\r\n+    public String addReview(@PathVariable Integer id, @ModelAttribute HospReviewForm form, Principal principal) {\r\n+        if (principal == null) {\r\n+            // 로그인하지 않은 사용자 처리 (예: 로그인 페이지로 리다이렉트)\r\n+            return \"redirect:/login\"; // 또는 다른 로그인 페이지 경로\r\n+        }\r\n+        String username = principal.getName(); // 이메일 (username)\r\n+        com.aloha.zootopia.domain.Users user = null;\r\n+        try {\r\n+            user = userMapper.select(username);\r\n+        } catch (Exception e) {\r\n+            // 사용자 조회 실패 처리\r\n+            e.printStackTrace();\r\n+            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\r\n+        }\r\n+        if (user == null) {\r\n+            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\r\n+        }\r\n+        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\r\n+        String nickname = user.getNickname(); // Users 엔티티에 nickname 필드가 있다고 가정\r\n+\r\n+        hospitalService.addReview(id, form, nickname, userId);\r\n+        return \"redirect:/hospitals/detail/\" + id;\r\n+    }\r\n+\r\n+    @PostMapping(\"/hospitals/{id}/reviews/{reviewId}/edit\")\r\n+    public String updateReview(@PathVariable Integer id,\r\n+                               @PathVariable Integer reviewId,\r\n+                               @RequestParam String content,\r\n+                               Principal principal) {\r\n+        if (principal == null) {\r\n+            return \"redirect:/login\";\r\n+        }\r\n+        String username = principal.getName(); // 이메일 (username)\r\n+        com.aloha.zootopia.domain.Users user = null;\r\n+        try {\r\n+            user = userMapper.select(username);\r\n+        } catch (Exception e) {\r\n+            // 사용자 조회 실패 처리\r\n+            e.printStackTrace();\r\n+            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\r\n+        }\r\n+        if (user == null) {\r\n+            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\r\n+        }\r\n+        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\r\n+\r\n+        hospitalService.updateReview(reviewId, content, userId);\r\n+        return \"redirect:/hospitals/detail/\" + id;\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751900859469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n         return \"service/hospital/create_hospital\"; // create_hospital.html 재사용\n     }\n \n     @PreAuthorize(\"hasRole('ADMIN')\")\n-    @PostMapping(\"/hospitals/edit\")\n+    @PostMapping(\"/hospitals/edit/{id}\")\n     public String update(@ModelAttribute HospitalForm form, @RequestParam(value = \"thumbnailImageFile\", required = false) MultipartFile thumbnailImageFile) throws Exception {\n         if (thumbnailImageFile != null && !thumbnailImageFile.isEmpty()) {\n             String imageUrl = hospitalImageUploader.uploadFile(thumbnailImageFile);\n             form.setThumbnailImageUrl(imageUrl);\n"
                },
                {
                    "date": 1751901314384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.multipart.MultipartFile;\n \n import com.aloha.zootopia.domain.Hospital;\n import com.aloha.zootopia.dto.HospReviewForm;\n@@ -44,8 +45,32 @@\n     //     model.addAttribute(\"hospitals\", hospitalService.getHospitals(animal));\n     //     return \"service/hospital/hosp_list\";\n     // }\n \n+     @GetMapping(\"/auth-test\")\n+     @ResponseBody // 페이지 이동 없이 응답을 바로 확인하기 위함\n+     public String authTest() {\n+         org.springframework.security.core.Authentication auth =\n+    \n+      org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();\n+    \n+         if (auth == null || !auth.isAuthenticated() || auth.getPrincipal().equals(\"anonymousUser\"\n+      )) {\n+             return \"로그인되지 않은 사용자입니다.\";\n+        }\n+   \n+        String username = auth.getName();\n+        java.util.Collection<? extends org.springframework.security.core.GrantedAuthority>\n+      authorities = auth.getAuthorities();\n+   \n+        System.out.println(\"--- 권한 테스트 ---\");\n+        System.out.println(\"사용자: \" + username);\n+        System.out.println(\"권한: \" + authorities);\n+        System.out.println(\"-------------------\");\n+   \n+        return \"사용자: \" + username + \" / 권한: \" + authorities;\n+    }\n+\n     @GetMapping(\"/hospitals\")\n     public String list(\n         @RequestParam(required = false) List<Integer> animal,\n         @RequestParam(value = \"pageNum\", defaultValue = \"1\") int pageNum,\n"
                }
            ],
            "date": 1751814130923,
            "name": "Commit-0",
            "content": "package com.aloha.zootopia.controller;\n\nimport java.security.Principal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport com.aloha.zootopia.domain.Hospital;\nimport com.aloha.zootopia.dto.HospReviewForm;\nimport com.aloha.zootopia.dto.HospitalForm;\nimport com.aloha.zootopia.dto.PageInfo;\nimport com.aloha.zootopia.mapper.UserMapper;\nimport com.aloha.zootopia.service.AnimalService;\nimport com.aloha.zootopia.service.HospitalService;\n// import com.github.pagehelper.PageInfo;\nimport com.aloha.zootopia.service.hospital.HospitalImageUploader;\n\n@Controller\npublic class HospitalController {\n    @Autowired HospitalService hospitalService;\n    @Autowired AnimalService animalService;\n    @Autowired UserMapper userMapper;\n    @Autowired HospitalImageUploader hospitalImageUploader;\n\n    public HospitalController(HospitalService hospitalService, AnimalService animalService, com.aloha.zootopia.mapper.UserMapper userMapper) {\n        this.hospitalService = hospitalService;\n        this.animalService = animalService;\n    }\n\n    // @GetMapping(\"/hospitals\")\n    // public String list(@RequestParam(required = false) List<Integer> animal, Model model) {\n    //     model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n    //     model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal);\n    //     model.addAttribute(\"hospitals\", hospitalService.getHospitals(animal));\n    //     return \"service/hospital/hosp_list\";\n    // }\n\n    @GetMapping(\"/hospitals\")\n    public String list(\n        @RequestParam(required = false) List<Integer> animal,\n        @RequestParam(value = \"pageNum\", defaultValue = \"1\") int pageNum,\n        Model model) {\n\n        int pageSize = 6;\n        int total = hospitalService.getHospitalCount(animal);\n        List<Hospital> hospitalList = hospitalService.getHospitalList(animal, pageNum, pageSize);\n\n        PageInfo pageInfo = new PageInfo();\n        pageInfo.setPageNum(pageNum);\n        pageInfo.setPageSize(pageSize);\n        pageInfo.setTotal(total);\n        int pages = (int) Math.ceil((double) total / pageSize);\n        pageInfo.setPages(pages);\n\n        // 네비게이션 계산 (5개씩)\n        int navSize = 5;\n        int startPage = ((pageNum - 1) / navSize) * navSize + 1;\n        int endPage = Math.min(startPage + navSize - 1, pages);\n        pageInfo.setStartPage(startPage);\n        pageInfo.setEndPage(endPage);\n        pageInfo.setHasPreviousPage(pageNum > 1);\n        pageInfo.setHasNextPage(pageNum < pages);\n        pageInfo.setHasFirstPage(pages > 1);\n        pageInfo.setHasLastPage(endPage < pages);\n\n        model.addAttribute(\"hospitalList\", hospitalList);\n        model.addAttribute(\"pageInfo\", pageInfo);\n        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n        String selectedAnimalsString = \"\";\n        if (animal != null && !animal.isEmpty()) {\n            selectedAnimalsString = animal.stream()\n                                        .map(String::valueOf)\n                                        .collect(Collectors.joining(\",\"));\n        }\n        model.addAttribute(\"selectedAnimals\", animal == null ? new ArrayList<>() : animal); // 기존 리스트도 유지\n        model.addAttribute(\"selectedAnimalsString\", selectedAnimalsString); // 새로 추가\n\n        return \"service/hospital/hosp_list\";\n    }\n\n\n    @GetMapping(\"/hospitals/detail/{id}\")\n    public String details(@PathVariable Integer id, Model model) {\n        model.addAttribute(\"hospital\", hospitalService.getHospital(id));\n        model.addAttribute(\"reviews\", hospitalService.getReviews(id));\n        model.addAttribute(\"reviewForm\", new HospReviewForm());\n        return \"service/hospital/details\";\n    }\n\n    // @PreAuthorize(\"hasRole('ADMIN')\")\n    @GetMapping(\"/hospitals/new\")\n    public String createForm(Model model) {\n        model.addAttribute(\"hospitalForm\", new HospitalForm());\n        model.addAttribute(\"specialtyList\", hospitalService.getAllSpecialties());\n        model.addAttribute(\"animalList\", hospitalService.getAllAnimals());\n        return \"service/hospital/create_hospital\";\n    }\n\n    // @PreAuthorize(\"hasRole('ADMIN')\")\n    @PostMapping(\"/hospitals\")\n    public String create(@ModelAttribute HospitalForm form, @RequestParam(value = \"thumbnailImageFile\", required = false) MultipartFile thumbnailImageFile) throws Exception {\n        if (thumbnailImageFile != null && !thumbnailImageFile.isEmpty()) {\n            String imageUrl = hospitalImageUploader.uploadFile(thumbnailImageFile);\n            form.setThumbnailImageUrl(imageUrl);\n        }\n        hospitalService.createHospital(form);\n        return \"redirect:/hospitals\";\n    }\n\n    @PostMapping(\"/hospitals/{id}/reviews\")\n    public String addReview(@PathVariable Integer id, @ModelAttribute HospReviewForm form, Principal principal) {\n        if (principal == null) {\n            // 로그인하지 않은 사용자 처리 (예: 로그인 페이지로 리다이렉트)\n            return \"redirect:/login\"; // 또는 다른 로그인 페이지 경로\n        }\n        String username = principal.getName(); // 이메일 (username)\n        com.aloha.zootopia.domain.Users user = null;\n        try {\n            user = userMapper.select(username);\n        } catch (Exception e) {\n            // 사용자 조회 실패 처리\n            e.printStackTrace();\n            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n        }\n        if (user == null) {\n            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n        }\n        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n        String nickname = user.getNickname(); // Users 엔티티에 nickname 필드가 있다고 가정\n\n        hospitalService.addReview(id, form, nickname, userId);\n        return \"redirect:/hospitals/detail/\" + id;\n    }\n\n    @PostMapping(\"/hospitals/{id}/reviews/{reviewId}/edit\")\n    public String updateReview(@PathVariable Integer id,\n                               @PathVariable Integer reviewId,\n                               @RequestParam String content,\n                               Principal principal) {\n        if (principal == null) {\n            return \"redirect:/login\";\n        }\n        String username = principal.getName(); // 이메일 (username)\n        com.aloha.zootopia.domain.Users user = null;\n        try {\n            user = userMapper.select(username);\n        } catch (Exception e) {\n            // 사용자 조회 실패 처리\n            e.printStackTrace();\n            return \"redirect:/error\"; // 또는 적절한 오류 페이지로 리다이렉트\n        }\n        if (user == null) {\n            return \"redirect:/login\"; // 사용자 정보가 없으면 로그인 페이지로\n        }\n        Integer userId = (int) user.getUserId(); // long을 int로 캐스팅\n\n        hospitalService.updateReview(reviewId, content, userId);\n        return \"redirect:/hospitals/detail/\" + id;\n    }\n}"
        }
    ]
}