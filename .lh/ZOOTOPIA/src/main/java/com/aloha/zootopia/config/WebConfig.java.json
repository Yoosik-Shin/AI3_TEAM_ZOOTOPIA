{
    "sourceFile": "ZOOTOPIA/src/main/java/com/aloha/zootopia/config/WebConfig.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1751985431063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751985480246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,58 @@\n-package com.aloha.zootopia.config;\r\n-\r\n-import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\r\n-import org.springframework.boot.web.server.WebServerFactoryCustomizer;\r\n-import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\r\n-import org.springframework.context.annotation.Bean;\r\n-import org.springframework.context.annotation.Configuration;\r\n-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\n-import org.springframework.security.crypto.password.PasswordEncoder;\r\n-import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\r\n-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n-\r\n-@Configuration          // 빈 등록 설정 클래스 지정\r\n-public class WebConfig implements WebMvcConfigurer {\r\n-\r\n-    @Bean                   // 빈 등록\r\n-    public PasswordEncoder passwordEncoder() {\r\n-        return new BCryptPasswordEncoder();\r\n-        // return NoOpPasswordEncoder.getInstance();\r\n-        // BCryptPasswordEncoder        : BCrypt 해시 알고리즘을 사용하여 비밀번호 암호화\r\n-        // NoOpPasswordEncoder          : 암호화 없이 비밀번호를 저장\r\n-        // ...\r\n-    }\r\n-\r\n-    @Override\r\n-    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n-        registry.addResourceHandler(\"/upload/**\")\r\n-                .addResourceLocations(\"file:///C:/upload/\");\r\n-    }\r\n-\r\n-\r\n-    @Bean\r\n-    public ConfigurableServletWebServerFactory webServerFactory() {\r\n-        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\r\n-        factory.addConnectorCustomizers(connector -> {\r\n-            connector.setMaxPostSize(50 * 1024 * 1024); // 50MB\r\n-            connector.setProperty(\"maxParameterCount\", \"10000\"); // ⚠️ 파일 수 제한 (기본 1000)\r\n-        });\r\n-        return factory;\r\n-    }\r\n-\r\n-    @Bean\r\n-    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> containerCustomizer() {\r\n-        return factory -> factory.addConnectorCustomizers(connector -> {\r\n-            connector.setProperty(\"maxParameterCount\", \"10000\"); // 기본 1000 → 10000으로 증가\r\n-        });\r\n-    }\r\n-\r\n-    @Bean\r\n-    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> customizer() {\r\n-        return factory -> factory.addConnectorCustomizers(connector -> {\r\n-            connector.setMaxPostSize(50 * 1024 * 1024); // POST 최대 크기 (50MB)\r\n-            connector.setProperty(\"maxParameterCount\", \"10000\"); // 파라미터 수 제한\r\n-        });\r\n-    }\r\n-\r\n-\r\n+package com.aloha.zootopia.config;\n+\n+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n+import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n+import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+\n+@Configuration          // 빈 등록 설정 클래스 지정\n+public class WebConfig implements WebMvcConfigurer {\n+\n+    @Bean                   // 빈 등록\n+    public PasswordEncoder passwordEncoder() {\n+        return new BCryptPasswordEncoder();\n+        // return NoOpPasswordEncoder.getInstance();\n+        // BCryptPasswordEncoder        : BCrypt 해시 알고리즘을 사용하여 비밀번호 암호화\n+        // NoOpPasswordEncoder          : 암호화 없이 비밀번호를 저장\n+        // ...\n+    }\n+\n+    @Override\n+    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n+        registry.addResourceHandler(\"/upload/**\")\n+                .addResourceLocations(\"file:///C:/upload/\");\n+    }\n+\n+\n+    @Bean\n+    public ConfigurableServletWebServerFactory webServerFactory() {\n+        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n+        factory.addConnectorCustomizers(connector -> {\n+            connector.setMaxPostSize(50 * 1024 * 1024); // 50MB\n+            connector.setProperty(\"maxParameterCount\", \"10000\"); // ⚠️ 파일 수 제한 (기본 1000)\n+        });\n+        return factory;\n+    }\n+\n+    @Bean\n+    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> containerCustomizer() {\n+        return factory -> factory.addConnectorCustomizers(connector -> {\n+            connector.setProperty(\"maxParameterCount\", \"10000\"); // 기본 1000 → 10000으로 증가\n+        });\n+    }\n+\n+    @Bean\n+    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> customizer() {\n+        return factory -> factory.addConnectorCustomizers(connector -> {\n+            connector.setMaxPostSize(50 * 1024 * 1024); // POST 최대 크기 (50MB)\n+            connector.setProperty(\"maxParameterCount\", \"10000\"); // 파라미터 수 제한\n+        });\n+    }\n+\n+\n }   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1751985492746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,58 @@\n-package com.aloha.zootopia.config;\r\n-\r\n-import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\r\n-import org.springframework.boot.web.server.WebServerFactoryCustomizer;\r\n-import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\r\n-import org.springframework.context.annotation.Bean;\r\n-import org.springframework.context.annotation.Configuration;\r\n-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\n-import org.springframework.security.crypto.password.PasswordEncoder;\r\n-import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\r\n-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n-\r\n-@Configuration          // 빈 등록 설정 클래스 지정\r\n-public class WebConfig implements WebMvcConfigurer {\r\n-\r\n-    @Bean                   // 빈 등록\r\n-    public PasswordEncoder passwordEncoder() {\r\n-        return new BCryptPasswordEncoder();\r\n-        // return NoOpPasswordEncoder.getInstance();\r\n-        // BCryptPasswordEncoder        : BCrypt 해시 알고리즘을 사용하여 비밀번호 암호화\r\n-        // NoOpPasswordEncoder          : 암호화 없이 비밀번호를 저장\r\n-        // ...\r\n-    }\r\n-\r\n-    @Override\r\n-    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n-        registry.addResourceHandler(\"/upload/**\")\r\n-                .addResourceLocations(\"file:///C:/upload/\");\r\n-    }\r\n-\r\n-\r\n-    @Bean\r\n-    public ConfigurableServletWebServerFactory webServerFactory() {\r\n-        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\r\n-        factory.addConnectorCustomizers(connector -> {\r\n-            connector.setMaxPostSize(50 * 1024 * 1024); // 50MB\r\n-            connector.setProperty(\"maxParameterCount\", \"10000\"); // ⚠️ 파일 수 제한 (기본 1000)\r\n-        });\r\n-        return factory;\r\n-    }\r\n-\r\n-    @Bean\r\n-    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> containerCustomizer() {\r\n-        return factory -> factory.addConnectorCustomizers(connector -> {\r\n-            connector.setProperty(\"maxParameterCount\", \"10000\"); // 기본 1000 → 10000으로 증가\r\n-        });\r\n-    }\r\n-\r\n-    @Bean\r\n-    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> customizer() {\r\n-        return factory -> factory.addConnectorCustomizers(connector -> {\r\n-            connector.setMaxPostSize(50 * 1024 * 1024); // POST 최대 크기 (50MB)\r\n-            connector.setProperty(\"maxParameterCount\", \"10000\"); // 파라미터 수 제한\r\n-        });\r\n-    }\r\n-\r\n-\r\n-}   \n\\ No newline at end of file\n+package com.aloha.zootopia.config;\n+\n+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n+import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n+import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n+import org.springframework.security.crypto.password.PasswordEncoder;\n+import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+\n+@Configuration          // 빈 등록 설정 클래스 지정\n+public class WebConfig implements WebMvcConfigurer {\n+\n+    @Bean                   // 빈 등록\n+    public PasswordEncoder passwordEncoder() {\n+        return new BCryptPasswordEncoder();\n+        // return NoOpPasswordEncoder.getInstance();\n+        // BCryptPasswordEncoder        : BCrypt 해시 알고리즘을 사용하여 비밀번호 암호화\n+        // NoOpPasswordEncoder          : 암호화 없이 비밀번호를 저장\n+        // ...\n+    }\n+\n+    @Override\n+    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n+        registry.addResourceHandler(\"/upload/**\")\n+                .addResourceLocations(\"file:///C:/upload/\");\n+    }\n+\n+\n+    @Bean\n+    public ConfigurableServletWebServerFactory webServerFactory() {\n+        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n+        factory.addConnectorCustomizers(connector -> {\n+            connector.setMaxPostSize(50 * 1024 * 1024); // 50MB\n+            connector.setProperty(\"maxParameterCount\", \"10000\"); // ⚠️ 파일 수 제한 (기본 1000)\n+        });\n+        return factory;\n+    }\n+\n+    @Bean\n+    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> containerCustomizer() {\n+        return factory -> factory.addConnectorCustomizers(connector -> {\n+            connector.setProperty(\"maxParameterCount\", \"10000\"); // 기본 1000 → 10000으로 증가\n+        });\n+    }\n+\n+    @Bean\n+    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> customizer() {\n+        return factory -> factory.addConnectorCustomizers(connector -> {\n+            connector.setMaxPostSize(50 * 1024 * 1024); // POST 최대 크기 (50MB)\n+            connector.setProperty(\"maxParameterCount\", \"10000\"); // 파라미터 수 제한\n+        });\n+    }\n+\n+\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1751985431063,
            "name": "Commit-0",
            "content": "package com.aloha.zootopia.config;\n\nimport org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration          // 빈 등록 설정 클래스 지정\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Bean                   // 빈 등록\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n        // return NoOpPasswordEncoder.getInstance();\n        // BCryptPasswordEncoder        : BCrypt 해시 알고리즘을 사용하여 비밀번호 암호화\n        // NoOpPasswordEncoder          : 암호화 없이 비밀번호를 저장\n        // ...\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/upload/**\")\n                .addResourceLocations(\"file:///C:/upload/\");\n    }\n\n\n    @Bean\n    public ConfigurableServletWebServerFactory webServerFactory() {\n        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n        factory.addConnectorCustomizers(connector -> {\n            connector.setMaxPostSize(50 * 1024 * 1024); // 50MB\n            connector.setProperty(\"maxParameterCount\", \"10000\"); // ⚠️ 파일 수 제한 (기본 1000)\n        });\n        return factory;\n    }\n\n    @Bean\n    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> containerCustomizer() {\n        return factory -> factory.addConnectorCustomizers(connector -> {\n            connector.setProperty(\"maxParameterCount\", \"10000\"); // 기본 1000 → 10000으로 증가\n        });\n    }\n\n    @Bean\n    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> customizer() {\n        return factory -> factory.addConnectorCustomizers(connector -> {\n            connector.setMaxPostSize(50 * 1024 * 1024); // POST 최대 크기 (50MB)\n            connector.setProperty(\"maxParameterCount\", \"10000\"); // 파라미터 수 제한\n        });\n    }\n\n\n}"
        }
    ]
}