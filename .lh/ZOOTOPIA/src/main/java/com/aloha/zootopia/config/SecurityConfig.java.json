{
    "sourceFile": "ZOOTOPIA/src/main/java/com/aloha/zootopia/config/SecurityConfig.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1751901075320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751903196796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,12 @@\n     // 🔐 스프링 시큐리티 설정 메소드\n \t@Bean\n     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n \n+        // 디버깅 활성화\n+    6     http.debug(true);\n+\n+\n         // ✅ 인가 설정\n \n         http.authorizeHttpRequests(auth -> auth\n                                 .requestMatchers(\"/admin\", \"/admin/**\").hasRole(\"ADMIN\")\n"
                },
                {
                    "date": 1751903349138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,12 +51,8 @@\n     // 🔐 스프링 시큐리티 설정 메소드\n \t@Bean\n     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n \n-        // 디버깅 활성화\n-    6     http.debug(true);\n-\n-\n         // ✅ 인가 설정\n \n         http.authorizeHttpRequests(auth -> auth\n                                 .requestMatchers(\"/admin\", \"/admin/**\").hasRole(\"ADMIN\")\n"
                }
            ],
            "date": 1751901075320,
            "name": "Commit-0",
            "content": "package com.aloha.zootopia.config;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;\nimport org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;\n\nimport com.aloha.zootopia.security.CustomAccessDeniedHandler;\nimport com.aloha.zootopia.security.LoginFailureHandler;\nimport com.aloha.zootopia.security.LoginSuccessHandler;\nimport com.aloha.zootopia.service.UserDetailServiceImpl;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@Configuration\n@EnableWebSecurity  // 해당 클래스를 스프링 시큐리티 설정 빈으로 등록\n                    // @Secured / @PreAuthorized, @PostAuthorized 으로 메서드 권한 제어 활성화\n@EnableMethodSecurity(securedEnabled = true, prePostEnabled = true)\npublic class SecurityConfig {\n\n    @Autowired\n    private DataSource dataSource;\n\n    // @Autowired\n    // private PasswordEncoder passwordEncoder;\n\n    @Autowired\n    private UserDetailServiceImpl userDetailServiceImpl;\n\n    @Autowired\n    private LoginSuccessHandler loginSuccessHandler;\n\n    @Autowired\n    private LoginFailureHandler loginFailureHandler;\n\n    @Autowired\n    private CustomAccessDeniedHandler customAccessDeniedHandler;\n\n\n    // 🔐 스프링 시큐리티 설정 메소드\n\t@Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n\n        // ✅ 인가 설정\n\n        http.authorizeHttpRequests(auth -> auth\n                                .requestMatchers(\"/admin\", \"/admin/**\").hasRole(\"ADMIN\")\n                                .requestMatchers(\"/user\", \"/user/**\").hasAnyRole(\"USER\",\"ADMIN\")\n                                .requestMatchers(\"/comments/add\").authenticated()\n                                .requestMatchers(\"/images/**\").permitAll()\n                                .requestMatchers(\"/hospitals\", \"/hospitals/detail/**\").permitAll()\n                                .anyRequest().permitAll()\n                                );\n\n\n\n\n        // 🔐 폼 로그인\n        // http.formLogin(login -> login.permitAll());\n\n        // ✅ 커스텀 로그인 페이지\n        http.formLogin(login -> login\n                                     .usernameParameter(\"email\")       // 아이디 파라미터\n                                     //.passwordParameter(\"pw\")       // 비밀번호 파라미터\n                                     .loginPage(\"/login\")                   // 로그인 페이지 경로\n                                     .loginProcessingUrl(\"/login\") // 로그인 요청 경로\n                                     // .defaultSuccessUrl(\"/?=true\") // 로그인 성공 경로\n                                     .successHandler(loginSuccessHandler)      // 로그인 성공 핸들러 설정\n                                     .failureHandler(loginFailureHandler)      // 로그인 실패 핸들러 설정\n\n                        );\n\n        http.exceptionHandling( exception -> exception\n                                            // 예외 처리 페이지 설정\n                                            // .accessDeniedPage(\"/exception\")\n                                            // 접근 거부 핸들러 설정\n                                            .accessDeniedHandler(customAccessDeniedHandler)\n\n                                );\n\n        // 👩‍💼 사용자 정의 인증\n        http.userDetailsService(userDetailServiceImpl);\n\n        // 🔄 자동 로그인\n        http.rememberMe(me -> me\n                .key(\"aloha\")\n                .tokenRepository(tokenRepository())\n                .tokenValiditySeconds(60 * 60 * 24 * 7));\n\n        // 🔓 로그아웃 설정\n        http.logout(logout -> logout\n                            .logoutUrl(\"/logout\")   // 로그아웃 요청 경로\n                            .logoutSuccessUrl(\"/login?logout=true\") // 로그아웃 성공 시 URL\n                            .invalidateHttpSession(true)        // 세션 초기화\n                            .deleteCookies(\"remember-id\")       // 로그아웃 시, 아이디저장 쿠키 삭제\n                            // .logoutSuccessHandler(null)         // 로그아웃 성공 핸들러 설정\n                    );\n\n        return http.build();\n    }\n\n    // PersistentRepository 토큰정보 객체 - 빈 등록\n    @Bean\n    public PersistentTokenRepository tokenRepository() {\n        // JdbcTokenRepositoryImpl : 토큰 저장 데이터 베이스를 등록하는 객체\n        JdbcTokenRepositoryImpl repositoryImpl = new JdbcTokenRepositoryImpl();\n        // 토큰 저장소를 사용하는 데이터 소스 지정\n        repositoryImpl.setDataSource(dataSource);\n        // persistent_logins 테이블 자동 생성\n        // repositoryImpl.setCreateTableOnStartup(true);\n        try {\n            repositoryImpl.getJdbcTemplate().execute(JdbcTokenRepositoryImpl.CREATE_TABLE_SQL);\n        } catch (Exception e) {\n            log.error(\"persistent_logins 테이블이 이미 생성되었습니다.\");\n        }\n        return repositoryImpl;\n    }\n\n\n    // 👮‍♂️🔐사용자 인증 관리 메소드\n    // 인메모리 방식으로 인증\n    // @Bean\n    // public UserDetailsService userDetailsService() {\n    //     // user 123456\n    //     UserDetails user = User.builder()\n    //                             .username(\"user\")\n    //                             .password(passwordEncoder.encode(\"123456\"))\n    //                             .roles(\"USER\")\n    //                             .build();\n    //     // admin 123456\n    //     UserDetails admin = User.builder()\n    //                             .username(\"admin\")\n    //                             .password(passwordEncoder.encode(\"123456\"))\n    //                             .roles(\"USER\", \"ADMIN\")\n    //                             .build();\n\n    //     return new InMemoryUserDetailsManager( user, admin );\n    //     // return new JdbcUserDetailsManager( ... );\n    // }\n\n\n    /**\n     * 🍃 JDBC 인증 방식 빈 등록\n     * @return\n     */\n    // @Bean\n    // public UserDetailsService userDetailsService() {\n    //     JdbcUserDetailsManager userDetailsManager\n    //             = new JdbcUserDetailsManager(dataSource);\n\n    //     // 사용자 인증 쿼리\n    //     String sql1 = \" SELECT username, password, enabled \"\n    //                 + \" FROM user \"\n    //                 + \" WHERE username = ? \"\n    //                 ;\n    //     // 사용자 권한 쿼리\n    //     String sql2 = \" SELECT username, auth \"\n    //                 + \" FROM user_auth \"\n    //                 + \" WHERE username = ? \"\n    //                 ;\n    //     userDetailsManager.setUsersByUsernameQuery(sql1);\n    //     userDetailsManager.setAuthoritiesByUsernameQuery(sql2);\n    //     return userDetailsManager;\n    // }\n\n\n    /**\n     * 🍃 AuthenticationManager 인증 관리자 빈 등록\n     * @param authenticationConfiguration\n     * @return\n     * @throws Exception\n    */\n    @Bean\n    public AuthenticationManager authenticationManager(\n                                    AuthenticationConfiguration authenticationConfiguration ) throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n\n}\n"
        }
    ]
}