<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aloha.zootopia.mapper.HospitalMapper">

  <resultMap id="HospitalResultMap" type="Hospital">
    <id property="hospitalId" column="hospital_id"/>
    <result property="name" column="name"/>
    <result property="address" column="address"/>
    <result property="homepage" column="homepage"/>
    <result property="phone" column="phone"/>
    <result property="email" column="email"/>
    <result property="thumbnailImageUrl" column="thumbnail_image_url"/>
    <result property="hospIntroduce" column="hosp_introduce"/>
    <result property="avgRating" column="avg_rating"/>
    <collection property="animals" ofType="com.aloha.zootopia.domain.Animal"
                select="com.aloha.zootopia.mapper.AnimalMapper.findByHospitalId" column="hospital_id"/>
    <collection property="specialties" ofType="Specialty"
                select="com.aloha.zootopia.mapper.SpecialtyMapper.findByHospitalId" column="hospital_id"/>
    <!-- [추가] 1:N 관계인 리뷰 목록(reviews)을 매핑합니다. -->
    <collection property="reviews" ofType="com.aloha.zootopia.domain.HospReview" javaType="java.util.ArrayList">
        <id property="reviewId" column="review_id"/>
        <result property="content" column="content"/>
        <result property="rating" column="rating"/>
        <result property="createdAt" column="created_at"/>
        <result property="userId" column="user_id"/>
        <result property="nickname" column="nickname"/>
    </collection>
  </resultMap>

  <select id="findAll" resultMap="HospitalResultMap">
    SELECT h.*, (SELECT AVG(rating) FROM hospital_review r WHERE r.hospital_id = h.hospital_id) AS avg_rating
    FROM hospital_info h
  </select>

  <select id="findByAnimalIds" parameterType="list" resultMap="HospitalResultMap">
    SELECT DISTINCT h.*, (SELECT AVG(rating)
                            FROM hospital_review r
                            WHERE r.hospital_id = h.hospital_id) AS avg_rating
    FROM hospital_info h
    JOIN hospital_animal ha ON h.hospital_id = ha.hospital_id
    WHERE ha.animal_id IN
    <foreach collection="animalIds" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
    GROUP BY h.hospital_id
    HAVING COUNT(DISTINCT ha.animal_id) = #{_parameter.size}
  </select>

  <!-- [수정] 병원 상세 조회 시, LEFT JOIN으로 리뷰와 사용자 닉네임까지 한번에 가져오도록 변경합니다. -->
  <select id="findById" parameterType="int" resultMap="HospitalResultMap" >
    SELECT
        h.*,
        (SELECT AVG(rating) FROM hospital_review r_avg WHERE r_avg.hospital_id = h.hospital_id) AS avg_rating,
        r.review_id, r.content, r.rating, r.created_at, r.user_id,
        u.nickname
    FROM
        hospital_info h
    LEFT JOIN
        hospital_review r ON h.hospital_id = r.hospital_id
    LEFT JOIN
        users u ON r.user_id = u.user_id
    WHERE h.hospital_id = #{hospitalId}
  </select>

  <insert id="insertHospital" parameterType="Hospital" useGeneratedKeys="true" keyProperty="hospitalId">
    INSERT INTO hospital_info (name, address, homepage, phone, email, thumbnail_image_url, hosp_introduce)
    VALUES (#{name}, #{address}, #{homepage}, #{phone}, #{email}, #{thumbnailImageUrl}, #{hospIntroduce})
  </insert>

  <insert id="insertHospitalAnimal">
    INSERT INTO hospital_animal (hospital_id, animal_id)
    VALUES (#{hospitalId}, #{animalId})
  </insert>

  <insert id="insertHospitalSpecialty">
    INSERT INTO hospital_specialty (hospital_id, specialty_id)
    VALUES (#{hospitalId}, #{specialtyId})
  </insert>

  <update id="updateHospital" parameterType="Hospital">
    UPDATE hospital_info
    SET
      name = #{name},
      address = #{address},
      homepage = #{homepage},
      phone = #{phone},
      email = #{email},
      thumbnail_image_url = #{thumbnailImageUrl},
      hosp_introduce = #{hospIntroduce}
    WHERE hospital_id = #{hospitalId}
  </update>

  <delete id="deleteHospitalAnimals" parameterType="int">
    DELETE FROM hospital_animal
    WHERE hospital_id = #{hospitalId}
  </delete>

  <delete id="deleteHospitalSpecialties" parameterType="int">
    DELETE FROM hospital_specialty
    WHERE hospital_id = #{hospitalId}
  </delete>

  <select id="selectHospitals" resultMap="HospitalResultMap">
    SELECT h.*, (SELECT AVG(rating) FROM hospital_review r WHERE r.hospital_id = h.hospital_id) AS avg_rating
    FROM hospital_info h
    <if test="animalIds != null and animalIds.size() > 0">
      JOIN hospital_animal ha ON h.hospital_id = ha.hospital_id
      WHERE ha.animal_id IN
      <foreach collection="animalIds" item="id" open="(" separator="," close=")">
        #{id}
      </foreach>
    </if>
    <if test="animalIds == null or animalIds.size() == 0">

    </if>
    ORDER BY h.hospital_id DESC
    LIMIT #{limit} OFFSET #{offset}
  </select>

  <select id="countHospitals" resultType="int">
    SELECT COUNT(DISTINCT h.hospital_id)
    FROM hospital_info h
    <if test="animalIds != null and animalIds.size() > 0">
      JOIN hospital_animal ha ON h.hospital_id = ha.hospital_id
      WHERE ha.animal_id IN
      <foreach collection="animalIds" item="id" open="(" separator="," close=")">
        #{id}
      </foreach>
    </if>
    <if test="animalIds == null or animalIds.size() == 0">

    </if>
  </select>

  <!-- 병원 삭제 -->
  <delete id="deleteHospital" parameterType="int">
    DELETE FROM hospital_info
    WHERE hospital_id = #{hospitalId}
  </delete>

</mapper>
